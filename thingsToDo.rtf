{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14200\viewh16580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Things to do:\
\
Part 1:\

\f1\b 1. Question 1\
2. Question 2\
3. Question 3
\f0\b0 \

\f1\b 4. Question 4
\f0\b0 \
\
Part 2:\

\f1\b 1. Finish baseline_cnn.py\
2. Implement train_model.ipynb\

\f0\b0 3. Part 1:\
	- implement 4 different scoring functions\
	- implement way to create confusion matrix\
	- implement a summation of all 4 scores\
4. Part 2:\
	- Test Implementation\
5. Part 3:\
	(i)\
		- Test transformations on the Input images\
	(ii)\
		- Test 2 distinct architectures\
		- Save the best performing architecture\
	(iii)\
		- Address rare class problem\
			- Things to try: (1) Weighted Objective Function (2) add training data from under-represented classes (SMOTE 			module in Python)\
\
6. Test Everything (and record data):\
7. Write up Report 	\
\
\
}